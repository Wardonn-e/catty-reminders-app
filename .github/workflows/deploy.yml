name: CD - Deploy on Release

on:
  release:
    types: [published]

permissions:
  contents: read
  packages: read

env:
  PROXY: ${{ vars.PROXY }}          
  ID: ${{ vars.ID }}               
  SSH_PORT: ${{ vars.SSH_PORT }}    
  SSH_USER: ${{ vars.SSH_USER }}    
  APP_PORT: ${{ vars.APP_PORT }}    
  IMAGE: ${{ vars.IMAGE }}          
  HEALTH_URL: http://app.${{ vars.ID }}.${{ vars.PROXY }}/

jobs:
  deploy:
    runs-on: ubuntu-latest

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/vm_key
          chmod 600 ~/.ssh/vm_key
          ssh-keyscan -p "${SSH_PORT}" "${PROXY}" >> ~/.ssh/known_hosts

      - name: Deploy on VM via SSH
        run: |
          ssh -i ~/.ssh/vm_key -p "${SSH_PORT}" -o BatchMode=yes "${SSH_USER}@${PROXY}" \
            "IMAGE='${IMAGE}' APP_PORT='${APP_PORT}' bash -s" <<'EOSSH'
          set -euo pipefail
        
          echo "Docker login to GHCR..."
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u '${{ github.actor }}' --password-stdin
        
          echo "Pull image: ${IMAGE}"
          docker pull "${IMAGE}"
        
          echo "Stop old container (if exists)..."
          docker stop reminders-container || true
          docker rm reminders-container || true
        
          echo "Run new container..."
          docker run -d \
            --name reminders-container \
            --restart unless-stopped \
            -p ${APP_PORT}:${APP_PORT} \
            "${IMAGE}"
        
          echo "Prune old images..."
          docker image prune -f || true
        
          echo "Container status:"
          docker ps --filter "name=reminders-container"
          EOSSH


      - name: Healthcheck
        run: |
          echo "Check ${HEALTH_URL}"
          for i in {1..12}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "${HEALTH_URL}" || true)
            if [ "$code" = "200" ] || [ "$code" = "302" ]; then
              echo "OK ($code)"
              exit 0
            fi
            echo "Waiting ($i)... got $code"; sleep 5
          done
          echo "Healthcheck failed"; exit 1
